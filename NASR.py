

import base64, hashlib, struct, sys, os, time, zlib, hmac, json, marshal, binascii, socket

try:
    from Crypto.Cipher import ChaCha20_Poly1305
except Exception:
    from Cryptodome.Cipher import ChaCha20_Poly1305

try:
    from Crypto.Cipher import AES
    _HAVE_AES = True
except Exception:
    _HAVE_AES = False

MAGIC = b"CHCH7"; VER=2
KDF_SCRYPT=1; KDF_PBKDF2=2; KDF_MIXED=4; KDF_TRIPLE=8
ALG_CHACHA20=1; ALG_XCHACHA20=2; ALG_AESGCM=3; ALG_AESSIV=4

IF_MAGIC = b"IFv7"
FLAG_COMPRESSED = 0x01
FLAG_ZPAD_PWR2  = 0x02
FLAG_MARSHAL    = 0x04
FLAG_LZMA       = 0x08

integrity_tag = "f84f977fe16071f61c1f7992f9d8d8388989173c26725318a016db6fd8cb086f"
_src_hash = "a05828e096b9644de9e937dbecc33086f2761b91ba12d9829b0690118b02aaa6"

# runtime secret hash (hex)
RUNTIME_SECRET_SHA256 = "9ddcbc714e5f25c71ddee1eaf75ac61d7834277e8521a7e5dbf11bcd9559f3c0"

_encrypted_parts = [
    "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"
]
encrypted_b64 = "".join(_encrypted_parts)


_pw_enc_hex = []
_pw_keys    = []
_order      = []

def _collect_pepper_2SDModVm():
    pe = os.environ.get("PEPPER_ENV","")
    pv = os.environ.get(pe, "") if pe else ""
    pel = os.environ.get("PEPPER_ENV_LIST","")
    if pel:
        for name in [x.strip() for x in pel.split(",") if x.strip()]:
            pv += os.environ.get(name, "")
    return pv

def _anti_debug_2SDModVm():
    if os.environ.get("ANTIDEBUG","0") != "1":
        return
    try:
        
        if sys.gettrace() is not None or getattr(sys, "getprofile", lambda: None)() is not None:
            sys.exit(1)
        
        if sys.platform.startswith("linux"):
            try:
                with open("/proc/self/status","r") as f:
                    for ln in f:
                        if ln.startswith("TracerPid:") and int(ln.split()[1]) != 0:
                            sys.exit(1)
            except Exception: pass
        
        t0 = time.perf_counter()
        x = 0
        for _ in range(200000):
            x += 1
        if (time.perf_counter() - t0) > 0.25:
            sys.exit(1)
    except Exception:
        pass

def _anti_vm_2SDModVm():
    try:
        flags = []
        
        if os.path.exists("/proc/cpuinfo"):
            txt = open("/proc/cpuinfo","r",errors="ignore").read().lower()
            if any(k in txt for k in ("hypervisor", "kvm", "qemu", "vmware", "virtualbox")):
                flags.append("cpuinfo")
       
        suspicious = ["/system/bin/qemu-props", "/dev/vboxguest", "/dev/vmci", "/dev/kvm"]
        if any(os.path.exists(p) for p in suspicious):
            flags.append("files")
       
        try:
            hn = socket.gethostname().lower()
            if any(k in hn for k in ("vm", "qemu", "vbox", "test")):
                flags.append("hostname")
        except Exception: pass
        if flags:
            sys.exit(1)
    except Exception:
        pass

def _hkdf_like_2SDModVm(key_material: bytes, salt: bytes, out_len: int = 32) -> bytes:
    digest = hmac.new(salt, key_material, hashlib.sha256).digest()
    if out_len <= len(digest):
        return digest[:out_len]
    out = bytearray()
    block = digest
    while len(out) < out_len:
        out.extend(block)
        block = hashlib.sha256(block + salt).digest()
    return bytes(out[:out_len])

def _get_internal_pw_2SDModVm():
    parts = []
    for i in _order:
        if i < len(_pw_enc_hex):
            try:
                raw = bytearray(binascii.unhexlify(_pw_enc_hex[i]))
                k = _pw_keys[i] & 0xFF if i < len(_pw_keys) else 0
                for j in range(len(raw)):
                    raw[j] ^= k
                parts.append(raw.decode("utf-8","strict"))
            except Exception:
                pass
    return "".join(parts)

def _parse_inner_2SDModVm(blob: bytes):
    pos=0
    if blob[:4] != IF_MAGIC: raise ValueError("Bad inner magic")
    pos+=4
    flags = blob[pos]; pos+=1
    (orig_len,) = struct.unpack("<I", blob[pos:pos+4]); pos+=4
    (pad_len,)  = struct.unpack("<I", blob[pos:pos+4]); pos+=4
    (meta_len,) = struct.unpack("<I", blob[pos:pos+4]); pos+=4
    total = len(blob)
    if meta_len > total - pos: raise ValueError("Corrupt inner (meta_len)")
    meta_b = blob[pos:pos+meta_len]; pos+=meta_len
    if pad_len > total - pos: raise ValueError("Corrupt inner (pad)")
    data_len = total - pos - pad_len
    if data_len < 0: raise ValueError("Corrupt inner (len)")
    data = blob[pos:pos+data_len]
    if (flags & FLAG_COMPRESSED):
        if (flags & FLAG_LZMA):
            import lzma
            out = lzma.decompress(data)
        else:
            out = zlib.decompress(data)
    else:
        out = data
    if len(out) != orig_len: raise ValueError("Inner length mismatch")
    try:
        meta = json.loads(meta_b.decode("utf-8"))
    except Exception:
        meta = {}
    return out, meta, flags

def _derive_key_for_decrypt_2SDModVm_2SDModVm(kdf_id: int, enc: bytes, pos: int, pw: str, salt: bytes):
    if kdf_id == KDF_TRIPLE:
        n, r, p, t, mem_kb, par, outlen, iters = struct.unpack("<III IIII I", enc[pos:pos+4*9]); pos += 4*9
        try:
            from argon2.low_level import hash_secret_raw, Type as ArgonType
            a_key = hash_secret_raw(secret=pw.encode(), salt=salt, time_cost=t, memory_cost=mem_kb, parallelism=par, hash_len=outlen, type=ArgonType.ID)
        except Exception:
            a_key = hashlib.sha256(pw.encode()+salt).digest()[:32]
        s_key = hashlib.scrypt(pw.encode(), salt=salt, n=n, r=r, p=p, dklen=32)
        p_key = hashlib.pbkdf2_hmac('sha512', pw.encode(), salt, iters, dklen=32)
        key   = _hkdf_like_2SDModVm(s_key + a_key + p_key, salt, 32)
        return key, pos
    elif kdf_id == KDF_MIXED:
        n,r,p, iters = struct.unpack("<III I", enc[pos:pos+16]); pos += 16
        s_key = hashlib.scrypt(pw.encode(), salt=salt, n=n, r=r, p=p, dklen=32)
        p_key = hashlib.pbkdf2_hmac('sha512', pw.encode(), salt, iters, dklen=32)
        key   = _hkdf_like_2SDModVm(s_key + p_key, salt, 32)
        return key, pos
    elif kdf_id == KDF_SCRYPT:
        n,r,p = struct.unpack("<III", enc[pos:pos+12]); pos += 12
        key = hashlib.scrypt(pw.encode(), salt=salt, n=n, r=r, p=p, dklen=32)
        return key, pos
    elif kdf_id == KDF_PBKDF2:
        (iters,) = struct.unpack("<I", enc[pos:pos+4]); pos += 4
        key = hashlib.pbkdf2_hmac('sha512', pw.encode(), salt, iters, dklen=32)
        return key, pos
    else:
        raise ValueError("Unknown KDF")

def _check_integrity_2SDModVm(pw: str):
    key = hashlib.sha256(pw.encode()).digest()
    calc = hmac.new(key, encrypted_b64.encode('utf-8'), hashlib.sha256).hexdigest()
    if calc != integrity_tag:
        sys.exit(1)

def _decrypt_2SDModVm(enc: bytes, pw: str) -> bytes:
    pos=0
    if enc[:5] != MAGIC: raise ValueError("Bad magic")
    pos+=5
    ver = enc[pos]; pos+=1
    if ver != VER: raise ValueError("Bad version")
    kdf_id = enc[pos]; pos+=1
    alg    = enc[pos]; pos+=1
    salt = enc[pos:pos+16]; pos+=16
    key, pos = _derive_key_for_decrypt_2SDModVm_2SDModVm(kdf_id, enc, pos, pw, salt)
    head_fixed = enc[:pos]

    if alg == ALG_CHACHA20:
        nonce = enc[pos:pos+12]; pos+=12
        tag   = enc[pos:pos+16]; pos+=16
        ct    = enc[pos:]
        cipher = ChaCha20_Poly1305.new(key=key, nonce=nonce)
        cipher.update(head_fixed)
        inner = cipher.decrypt_and_verify(ct, tag)
    elif alg == ALG_AESGCM:
        if not _HAVE_AES: raise RuntimeError("AES not available for AES-GCM")
        nonce = enc[pos:pos+12]; pos+=12
        tag   = enc[pos:pos+16]; pos+=16
        ct    = enc[pos:]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        cipher.update(head_fixed)
        inner = cipher.decrypt_and_verify(ct, tag)
    elif alg == ALG_AESSIV:
        if not _HAVE_AES: raise RuntimeError("AES not available for AES-SIV")
        tag = enc[pos:pos+16]; pos+=16
        ct  = enc[pos:]
        cipher = AES.new(key, AES.MODE_SIV)
        cipher.update(head_fixed)
        inner = cipher.decrypt_and_verify(ct, tag)
    elif alg == ALG_XCHACHA20:
        try:
            from nacl.bindings import crypto_aead_xchacha20poly1305_ietf_decrypt_2SDModVm
        except Exception:
            raise RuntimeError("PyNaCl not available for XChaCha20-Poly1305")
        nonce = enc[pos:pos+24]; pos+=24
        ct = enc[pos:]
        inner = crypto_aead_xchacha20poly1305_ietf_decrypt_2SDModVm(ct, head_fixed, nonce, key)
    else:
        raise ValueError("Unknown ALG")
    return inner

def __chk_src_2SDModVm(code_bytes: bytes):
    try:
        if _src_hash:
            h = hashlib.sha256(code_bytes).hexdigest()
            if h != _src_hash:
                sys.exit(1)
    except Exception:
        pass

def _wipe_2SDModVm(b):
    try:
        for i in range(len(b)): b[i]=0
    except Exception: pass


def _auto_pw_2SDModVm():
  
    try:
        
        pw = _get_internal_pw_2SDModVm()

        
        env_name = os.environ.get("EXTRA_PW_ENV", "")
        if env_name:
            pw += os.environ.get(env_name, "")

        
        pepper_val = _collect_pepper_2SDModVm()
        if pepper_val:
            pw += pepper_val

       
        try:
            _ = hashlib.pbkdf2_hmac("sha512", pw.encode(), hashlib.sha256(pw.encode()).digest(), 5_000, dklen=32)
        except Exception:
            pass

        return pw
    except Exception:
        sys.exit(1)


if __name__ == "__main__":
    _anti_debug_2SDModVm()
    _anti_vm_2SDModVm()

    
    pw = _auto_pw_2SDModVm()

    
    _check_integrity_2SDModVm(pw)

    enc = base64.b64decode(encrypted_b64)
    try:
        inner = _decrypt_2SDModVm(enc, pw)
        blob, meta, flags = _parse_inner_2SDModVm(inner)
    except Exception:
       
        sys.exit(1)

    try:
        ns = {}
        if (flags & FLAG_MARSHAL):
            __chk_src_2SDModVm(blob)
            codeobj = marshal.loads(blob)
            exec(codeobj, ns, ns)
        else:
            __chk_src_2SDModVm(blob)
            code = blob.decode("utf-8")
            exec(compile(code, "<secured>", "exec"), ns, ns)
    except Exception:
        sys.exit(1)

    try:
        if isinstance(blob, (bytes, bytearray)):
            ba = bytearray(blob)
            for i in range(len(ba)):
                ba[i] = 0
    except Exception:
        pass
